// +build !ignore_autogenerated

// Code generated by openapi-gen. DO NOT EDIT.

// This file was autogenerated by openapi-gen. Do not edit it manually!

package github_com_tektoncd_pipeline_pipeline_v1alpha1

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.ArtifactBucket":                schema_pkg_apis_pipeline_v1alpha1_ArtifactBucket(ref),
		"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.ArtifactPVC":                   schema_pkg_apis_pipeline_v1alpha1_ArtifactPVC(ref),
		"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.BuildGCSResource":              schema_pkg_apis_pipeline_v1alpha1_BuildGCSResource(ref),
		"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.ClusterResource":               schema_pkg_apis_pipeline_v1alpha1_ClusterResource(ref),
		"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.ClusterTask":                   schema_pkg_apis_pipeline_v1alpha1_ClusterTask(ref),
		"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.ClusterTaskList":               schema_pkg_apis_pipeline_v1alpha1_ClusterTaskList(ref),
		"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.DAG":                           schema_pkg_apis_pipeline_v1alpha1_DAG(ref),
		"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.GCSResource":                   schema_pkg_apis_pipeline_v1alpha1_GCSResource(ref),
		"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.GitResource":                   schema_pkg_apis_pipeline_v1alpha1_GitResource(ref),
		"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.ImageResource":                 schema_pkg_apis_pipeline_v1alpha1_ImageResource(ref),
		"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.Inputs":                        schema_pkg_apis_pipeline_v1alpha1_Inputs(ref),
		"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.Node":                          schema_pkg_apis_pipeline_v1alpha1_Node(ref),
		"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.Outputs":                       schema_pkg_apis_pipeline_v1alpha1_Outputs(ref),
		"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.Param":                         schema_pkg_apis_pipeline_v1alpha1_Param(ref),
		"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.ParamSpec":                     schema_pkg_apis_pipeline_v1alpha1_ParamSpec(ref),
		"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.Pipeline":                      schema_pkg_apis_pipeline_v1alpha1_Pipeline(ref),
		"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.PipelineDeclaredResource":      schema_pkg_apis_pipeline_v1alpha1_PipelineDeclaredResource(ref),
		"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.PipelineList":                  schema_pkg_apis_pipeline_v1alpha1_PipelineList(ref),
		"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.PipelineRef":                   schema_pkg_apis_pipeline_v1alpha1_PipelineRef(ref),
		"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.PipelineResource":              schema_pkg_apis_pipeline_v1alpha1_PipelineResource(ref),
		"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.PipelineResourceBinding":       schema_pkg_apis_pipeline_v1alpha1_PipelineResourceBinding(ref),
		"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.PipelineResourceList":          schema_pkg_apis_pipeline_v1alpha1_PipelineResourceList(ref),
		"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.PipelineResourceRef":           schema_pkg_apis_pipeline_v1alpha1_PipelineResourceRef(ref),
		"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.PipelineResourceResult":        schema_pkg_apis_pipeline_v1alpha1_PipelineResourceResult(ref),
		"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.PipelineResourceSpec":          schema_pkg_apis_pipeline_v1alpha1_PipelineResourceSpec(ref),
		"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.PipelineResourceStatus":        schema_pkg_apis_pipeline_v1alpha1_PipelineResourceStatus(ref),
		"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.PipelineRun":                   schema_pkg_apis_pipeline_v1alpha1_PipelineRun(ref),
		"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.PipelineRunList":               schema_pkg_apis_pipeline_v1alpha1_PipelineRunList(ref),
		"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.PipelineRunSpec":               schema_pkg_apis_pipeline_v1alpha1_PipelineRunSpec(ref),
		"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.PipelineRunSpecServiceAccount": schema_pkg_apis_pipeline_v1alpha1_PipelineRunSpecServiceAccount(ref),
		"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.PipelineRunStatus":             schema_pkg_apis_pipeline_v1alpha1_PipelineRunStatus(ref),
		"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.PipelineRunTaskRunStatus":      schema_pkg_apis_pipeline_v1alpha1_PipelineRunTaskRunStatus(ref),
		"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.PipelineSpec":                  schema_pkg_apis_pipeline_v1alpha1_PipelineSpec(ref),
		"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.PipelineStatus":                schema_pkg_apis_pipeline_v1alpha1_PipelineStatus(ref),
		"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.PipelineTask":                  schema_pkg_apis_pipeline_v1alpha1_PipelineTask(ref),
		"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.PipelineTaskInputResource":     schema_pkg_apis_pipeline_v1alpha1_PipelineTaskInputResource(ref),
		"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.PipelineTaskOutputResource":    schema_pkg_apis_pipeline_v1alpha1_PipelineTaskOutputResource(ref),
		"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.PipelineTaskParam":             schema_pkg_apis_pipeline_v1alpha1_PipelineTaskParam(ref),
		"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.PipelineTaskResources":         schema_pkg_apis_pipeline_v1alpha1_PipelineTaskResources(ref),
		"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.PipelineTaskRun":               schema_pkg_apis_pipeline_v1alpha1_PipelineTaskRun(ref),
		"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.PullRequestResource":           schema_pkg_apis_pipeline_v1alpha1_PullRequestResource(ref),
		"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.Results":                       schema_pkg_apis_pipeline_v1alpha1_Results(ref),
		"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.SecretParam":                   schema_pkg_apis_pipeline_v1alpha1_SecretParam(ref),
		"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.StepState":                     schema_pkg_apis_pipeline_v1alpha1_StepState(ref),
		"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.Task":                          schema_pkg_apis_pipeline_v1alpha1_Task(ref),
		"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.TaskList":                      schema_pkg_apis_pipeline_v1alpha1_TaskList(ref),
		"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.TaskRef":                       schema_pkg_apis_pipeline_v1alpha1_TaskRef(ref),
		"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.TaskResource":                  schema_pkg_apis_pipeline_v1alpha1_TaskResource(ref),
		"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.TaskResourceBinding":           schema_pkg_apis_pipeline_v1alpha1_TaskResourceBinding(ref),
		"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.TaskRun":                       schema_pkg_apis_pipeline_v1alpha1_TaskRun(ref),
		"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.TaskRunInputs":                 schema_pkg_apis_pipeline_v1alpha1_TaskRunInputs(ref),
		"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.TaskRunList":                   schema_pkg_apis_pipeline_v1alpha1_TaskRunList(ref),
		"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.TaskRunOutputs":                schema_pkg_apis_pipeline_v1alpha1_TaskRunOutputs(ref),
		"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.TaskRunSpec":                   schema_pkg_apis_pipeline_v1alpha1_TaskRunSpec(ref),
		"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.TaskRunStatus":                 schema_pkg_apis_pipeline_v1alpha1_TaskRunStatus(ref),
		"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.TaskSpec":                      schema_pkg_apis_pipeline_v1alpha1_TaskSpec(ref),
		"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.TestResult":                    schema_pkg_apis_pipeline_v1alpha1_TestResult(ref),
		"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.hdcnKey":                       schema_pkg_apis_pipeline_v1alpha1_hdcnKey(ref),
	}
}

func schema_pkg_apis_pipeline_v1alpha1_ArtifactBucket(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ArtifactBucket contains the Storage bucket configuration defined in the Bucket config map.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"Name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"Location": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"Secrets": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.SecretParam"),
									},
								},
							},
						},
					},
				},
				Required: []string{"Name", "Location", "Secrets"},
			},
		},
		Dependencies: []string{
			"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.SecretParam"},
	}
}

func schema_pkg_apis_pipeline_v1alpha1_ArtifactPVC(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ArtifactPVC represents the pvc created by the pipelinerun for artifacts temporary storage",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"Name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"PersistentVolumeClaim": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/api/core/v1.PersistentVolumeClaim"),
						},
					},
				},
				Required: []string{"Name", "PersistentVolumeClaim"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.PersistentVolumeClaim"},
	}
}

func schema_pkg_apis_pipeline_v1alpha1_BuildGCSResource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"Name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"Type": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"Location": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"DestinationDir": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"ArtifactType": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"Name", "Type", "Location", "DestinationDir", "ArtifactType"},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_pipeline_v1alpha1_ClusterResource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ClusterResource represents a cluster configuration (kubeconfig) that can be accessed by tasks in the pipeline",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"url": {
						SchemaProps: spec.SchemaProps{
							Description: "URL must be a host string",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"revision": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"username": {
						SchemaProps: spec.SchemaProps{
							Description: "Server requires Basic authentication",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"password": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"token": {
						SchemaProps: spec.SchemaProps{
							Description: "Server requires Bearer authentication. This client will not attempt to use refresh tokens for an OAuth2 flow. Token overrides userame and password",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"Insecure": {
						SchemaProps: spec.SchemaProps{
							Description: "Server should be accessed without verifying the TLS certificate. For testing only.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"cadata": {
						SchemaProps: spec.SchemaProps{
							Description: "CAData holds PEM-encoded bytes (typically read from a root certificates bundle). CAData takes precedence over CAFile",
							Type:        []string{"string"},
							Format:      "byte",
						},
					},
					"secrets": {
						SchemaProps: spec.SchemaProps{
							Description: "Secrets holds a struct to indicate a field name and corresponding secret name to populate it",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.SecretParam"),
									},
								},
							},
						},
					},
				},
				Required: []string{"name", "type", "url", "revision", "username", "password", "token", "Insecure", "cadata", "secrets"},
			},
		},
		Dependencies: []string{
			"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.SecretParam"},
	}
}

func schema_pkg_apis_pipeline_v1alpha1_ClusterTask(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ClusterTask is a Task with a cluster scope. ClusterTasks are used to represent Tasks that should be publicly addressable from any namespace in the cluster.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Description: "Spec holds the desired state of the Task from the client",
							Ref:         ref("github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.TaskSpec"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.TaskSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_pipeline_v1alpha1_ClusterTaskList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ClusterTaskList contains a list of ClusterTask",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.ClusterTask"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.ClusterTask", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_pipeline_v1alpha1_DAG(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DAG represents the Pipeline DAG",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"Nodes": {
						SchemaProps: spec.SchemaProps{
							Description: "Nodes represent map of PipelineTask name to Node in Pipeline DAG",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.Node"),
									},
								},
							},
						},
					},
				},
				Required: []string{"Nodes"},
			},
		},
		Dependencies: []string{
			"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.Node"},
	}
}

func schema_pkg_apis_pipeline_v1alpha1_GCSResource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GCSResource is a GCS endpoint from which to get artifacts which is required by a Build/Task for context (e.g. a archive from which to build an image).",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"location": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"typeDir": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"destinationDir": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"secrets": {
						SchemaProps: spec.SchemaProps{
							Description: "Secret holds a struct to indicate a field name and corresponding secret name to populate it",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.SecretParam"),
									},
								},
							},
						},
					},
				},
				Required: []string{"name", "type", "location", "typeDir", "destinationDir", "secrets"},
			},
		},
		Dependencies: []string{
			"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.SecretParam"},
	}
}

func schema_pkg_apis_pipeline_v1alpha1_GitResource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GitResource is an endpoint from which to get data which is required by a Build/Task for context (e.g. a repo from which to build an image).",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"url": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"revision": {
						SchemaProps: spec.SchemaProps{
							Description: "Git revision (branch, tag, commit SHA or ref) to clone.  See https://git-scm.com/docs/gitrevisions#_specifying_revisions for more information.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"TargetPath": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"name", "type", "url", "revision", "TargetPath"},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_pipeline_v1alpha1_ImageResource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ImageResource defines an endpoint where artifacts can be stored, such as images.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"url": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"digest": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"OutputImageDir": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"name", "type", "url", "digest", "OutputImageDir"},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_pipeline_v1alpha1_Inputs(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Inputs are the requirements that a task needs to run a Build.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"resources": {
						SchemaProps: spec.SchemaProps{
							Description: "Resources is a list of the input resources required to run the task. Resources are represented in TaskRuns as bindings to instances of PipelineResources.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.TaskResource"),
									},
								},
							},
						},
					},
					"params": {
						SchemaProps: spec.SchemaProps{
							Description: "Params is a list of input parameters required to run the task. Params must be supplied as inputs in TaskRuns unless they declare a default value.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.ParamSpec"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.ParamSpec", "github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.TaskResource"},
	}
}

func schema_pkg_apis_pipeline_v1alpha1_Node(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Node represents a Task in a pipeline.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"Task": {
						SchemaProps: spec.SchemaProps{
							Description: "Task represent the PipelineTask in Pipeline",
							Ref:         ref("github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.PipelineTask"),
						},
					},
					"Prev": {
						SchemaProps: spec.SchemaProps{
							Description: "Prev represent all the Previous task Nodes for the current Task",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.Node"),
									},
								},
							},
						},
					},
					"Next": {
						SchemaProps: spec.SchemaProps{
							Description: "Next represent all the Next task Nodes for the current Task",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.Node"),
									},
								},
							},
						},
					},
				},
				Required: []string{"Task", "Prev", "Next"},
			},
		},
		Dependencies: []string{
			"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.Node", "github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.PipelineTask"},
	}
}

func schema_pkg_apis_pipeline_v1alpha1_Outputs(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Outputs allow a task to declare what data the Build/Task will be producing, i.e. results such as logs and artifacts such as images.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"results": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.TestResult"),
									},
								},
							},
						},
					},
					"resources": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.TaskResource"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.TaskResource", "github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.TestResult"},
	}
}

func schema_pkg_apis_pipeline_v1alpha1_Param(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Param declares a value to use for the Param called Name.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"value": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"name", "value"},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_pipeline_v1alpha1_ParamSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ParamSpec defines arbitrary parameters needed beyond typed inputs (such as resources). Parameter values are provided by users as inputs on a TaskRun or PipelineRun.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name declares the name by which a parameter is referenced.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "Description is a user-facing description of the parameter that may be used to populate a UI.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"default": {
						SchemaProps: spec.SchemaProps{
							Description: "Default is the value a parameter takes if no input value is supplied. If default is set, a Task may be executed without a supplied value for the parameter.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"name"},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_pipeline_v1alpha1_Pipeline(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Pipeline describes a list of Tasks to execute. It expresses how outputs of tasks feed into inputs of subsequent tasks.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Description: "Spec holds the desired state of the Pipeline from the client",
							Ref:         ref("github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.PipelineSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status communicates the observed state of the Pipeline from the controller.",
							Ref:         ref("github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.PipelineStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.PipelineSpec", "github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.PipelineStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_pipeline_v1alpha1_PipelineDeclaredResource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PipelineDeclaredResource is used by a Pipeline to declare the types of the PipelineResources that it will required to run and names which can be used to refer to these PipelineResources in PipelineTaskResourceBindings.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name is the name that will be used by the Pipeline to refer to this resource. It does not directly correspond to the name of any PipelineResources Task inputs or outputs, and it does not correspond to the actual names of the PipelineResources that will be bound in the PipelineRun.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Type is the type of the PipelineResource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"name", "type"},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_pipeline_v1alpha1_PipelineList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PipelineList contains a list of Pipeline",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.Pipeline"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.Pipeline", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_pipeline_v1alpha1_PipelineRef(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PipelineRef can be used to refer to a specific instance of a Pipeline. Copied from CrossVersionObjectReference: https://github.com/kubernetes/kubernetes/blob/169df7434155cbbc22f1532cba8e0a9588e29ad8/pkg/apis/autoscaling/types.go#L64",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "API version of the referent",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_pipeline_v1alpha1_PipelineResource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PipelineResource describes a resource that is an input to or output from a Task.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Description: "Spec holds the desired state of the PipelineResource from the client",
							Ref:         ref("github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.PipelineResourceSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status communicates the observed state of the PipelineResource from the controller",
							Ref:         ref("github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.PipelineResourceStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.PipelineResourceSpec", "github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.PipelineResourceStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_pipeline_v1alpha1_PipelineResourceBinding(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PipelineResourceBinding connects a reference to an instance of a PipelineResource with a PipelineResource dependency that the Pipeline has declared",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name is the name of the PipelineResource in the Pipeline's declaration",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"resourceRef": {
						SchemaProps: spec.SchemaProps{
							Description: "ResourceRef is a reference to the instance of the actual PipelineResource that should be used",
							Ref:         ref("github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.PipelineResourceRef"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.PipelineResourceRef"},
	}
}

func schema_pkg_apis_pipeline_v1alpha1_PipelineResourceList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PipelineResourceList contains a list of PipelineResources",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.PipelineResource"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.PipelineResource", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_pipeline_v1alpha1_PipelineResourceRef(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PipelineResourceRef can be used to refer to a specific instance of a Resource",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "API version of the referent",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_pipeline_v1alpha1_PipelineResourceResult(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PipelineResourceResult used to export the image name and digest as json",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"digest": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"name", "digest"},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_pipeline_v1alpha1_PipelineResourceSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PipelineResourceSpec defines  an individual resources used in the pipeline.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"params": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.Param"),
									},
								},
							},
						},
					},
					"secrets": {
						SchemaProps: spec.SchemaProps{
							Description: "Secrets to fetch to populate some of resource fields",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.SecretParam"),
									},
								},
							},
						},
					},
				},
				Required: []string{"type", "params"},
			},
		},
		Dependencies: []string{
			"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.Param", "github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.SecretParam"},
	}
}

func schema_pkg_apis_pipeline_v1alpha1_PipelineResourceStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PipelineResourceStatus does not contain anything because Resources on their own do not have a status, they just hold data which is later used by PipelineRuns and TaskRuns.",
				Type:        []string{"object"},
				Properties:  map[string]spec.Schema{},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_pipeline_v1alpha1_PipelineRun(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PipelineRun represents a single execution of a Pipeline. PipelineRuns are how the graph of Tasks declared in a Pipeline are executed; they specify inputs to Pipelines such as parameter values and capture operational aspects of the Tasks execution such as service account and tolerations. Creating a PipelineRun creates TaskRuns for Tasks in the referenced Pipeline.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.PipelineRunSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.PipelineRunStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.PipelineRunSpec", "github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.PipelineRunStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_pipeline_v1alpha1_PipelineRunList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PipelineRunList contains a list of PipelineRun",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.PipelineRun"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.PipelineRun", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_pipeline_v1alpha1_PipelineRunSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PipelineRunSpec defines the desired state of PipelineRun",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"pipelineRef": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.PipelineRef"),
						},
					},
					"resources": {
						SchemaProps: spec.SchemaProps{
							Description: "Resources is a list of bindings specifying which actual instances of PipelineResources to use for the resources the Pipeline has declared it needs.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.PipelineResourceBinding"),
									},
								},
							},
						},
					},
					"params": {
						SchemaProps: spec.SchemaProps{
							Description: "Params is a list of parameter names and values.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.Param"),
									},
								},
							},
						},
					},
					"serviceAccount": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"serviceAccounts": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.PipelineRunSpecServiceAccount"),
									},
								},
							},
						},
					},
					"results": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.Results"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Used for cancelling a pipelinerun (and maybe more later on)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"timeout": {
						SchemaProps: spec.SchemaProps{
							Description: "Time after which the Pipeline times out. Defaults to never. Refer to Go's ParseDuration documentation for expected format: https://golang.org/pkg/time/#ParseDuration",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
						},
					},
					"nodeSelector": {
						SchemaProps: spec.SchemaProps{
							Description: "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"tolerations": {
						SchemaProps: spec.SchemaProps{
							Description: "If specified, the pod's tolerations.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.Toleration"),
									},
								},
							},
						},
					},
					"affinity": {
						SchemaProps: spec.SchemaProps{
							Description: "If specified, the pod's scheduling constraints",
							Ref:         ref("k8s.io/api/core/v1.Affinity"),
						},
					},
				},
				Required: []string{"pipelineRef"},
			},
		},
		Dependencies: []string{
			"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.Param", "github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.PipelineRef", "github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.PipelineResourceBinding", "github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.PipelineRunSpecServiceAccount", "github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.Results", "k8s.io/api/core/v1.Affinity", "k8s.io/api/core/v1.Toleration", "k8s.io/apimachinery/pkg/apis/meta/v1.Duration"},
	}
}

func schema_pkg_apis_pipeline_v1alpha1_PipelineRunSpecServiceAccount(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PipelineRunSpecServiceAccount can be used to configure specific ServiceAccount for a concrete Task",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"taskName": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"serviceAccount": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_pipeline_v1alpha1_PipelineRunStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PipelineRunStatus defines the observed state of PipelineRun",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "ObservedGeneration is the 'Generation' of the Service that was last processed by the controller.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"conditions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "type",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Conditions the latest available observations of a resource's current state.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/knative/pkg/apis.Condition"),
									},
								},
							},
						},
					},
					"results": {
						SchemaProps: spec.SchemaProps{
							Description: "In #107 should be updated to hold the location logs have been uploaded to",
							Ref:         ref("github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.Results"),
						},
					},
					"startTime": {
						SchemaProps: spec.SchemaProps{
							Description: "StartTime is the time the PipelineRun is actually started.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"completionTime": {
						SchemaProps: spec.SchemaProps{
							Description: "CompletionTime is the time the PipelineRun completed.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"taskRuns": {
						SchemaProps: spec.SchemaProps{
							Description: "map of PipelineRunTaskRunStatus with the taskRun name as the key",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.PipelineRunTaskRunStatus"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/knative/pkg/apis.Condition", "github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.PipelineRunTaskRunStatus", "github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.Results", "k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_pkg_apis_pipeline_v1alpha1_PipelineRunTaskRunStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PipelineRunTaskRunStatus contains the name of the PipelineTask for this TaskRun and the TaskRun's Status",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"pipelineTaskName": {
						SchemaProps: spec.SchemaProps{
							Description: "PipelineTaskName is the name of the PipelineTask.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status is the TaskRunStatus for the corresponding TaskRun",
							Ref:         ref("github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.TaskRunStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.TaskRunStatus"},
	}
}

func schema_pkg_apis_pipeline_v1alpha1_PipelineSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PipelineSpec defines the desired state of Pipeline.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"resources": {
						SchemaProps: spec.SchemaProps{
							Description: "Resources declares the names and types of the resources given to the Pipeline's tasks as inputs and outputs.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.PipelineDeclaredResource"),
									},
								},
							},
						},
					},
					"tasks": {
						SchemaProps: spec.SchemaProps{
							Description: "Tasks declares the graph of Tasks that execute when this Pipeline is run.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.PipelineTask"),
									},
								},
							},
						},
					},
					"params": {
						SchemaProps: spec.SchemaProps{
							Description: "Params declares a list of input parameters that must be supplied when this Pipeline is run.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.ParamSpec"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.ParamSpec", "github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.PipelineDeclaredResource", "github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.PipelineTask"},
	}
}

func schema_pkg_apis_pipeline_v1alpha1_PipelineStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PipelineStatus does not contain anything because Pipelines on their own do not have a status, they just hold data which is later used by a PipelineRun.",
				Type:        []string{"object"},
				Properties:  map[string]spec.Schema{},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_pipeline_v1alpha1_PipelineTask(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PipelineTask defines a task in a Pipeline, passing inputs from both Params and from the output of previous tasks.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name is the name of this task within the context of a Pipeline. Name is used as a coordinate with the `from` and `runAfter` fields to establish the execution order of tasks relative to one another.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"taskRef": {
						SchemaProps: spec.SchemaProps{
							Description: "TaskRef is a reference to a task definition.",
							Ref:         ref("github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.TaskRef"),
						},
					},
					"retries": {
						SchemaProps: spec.SchemaProps{
							Description: "Retries represents how many times this task should be retried in case of task failure: ConditionSucceeded set to False",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"runAfter": {
						SchemaProps: spec.SchemaProps{
							Description: "RunAfter is the list of PipelineTask names that should be executed before this Task executes. (Used to force a specific ordering in graph execution.)",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"resources": {
						SchemaProps: spec.SchemaProps{
							Description: "Resources declares the resources given to this task as inputs and outputs.",
							Ref:         ref("github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.PipelineTaskResources"),
						},
					},
					"params": {
						SchemaProps: spec.SchemaProps{
							Description: "Parameters declares parameters passed to this task.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.Param"),
									},
								},
							},
						},
					},
				},
				Required: []string{"taskRef"},
			},
		},
		Dependencies: []string{
			"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.Param", "github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.PipelineTaskResources", "github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.TaskRef"},
	}
}

func schema_pkg_apis_pipeline_v1alpha1_PipelineTaskInputResource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PipelineTaskInputResource maps the name of a declared PipelineResource input dependency in a Task to the resource in the Pipeline's DeclaredPipelineResources that should be used. This input may come from a previous task.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name is the name of the PipelineResource as declared by the Task.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"resource": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource is the name of the DeclaredPipelineResource to use.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"from": {
						SchemaProps: spec.SchemaProps{
							Description: "From is the list of PipelineTask names that the resource has to come from. (Implies an ordering in the execution graph.)",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
				Required: []string{"name", "resource"},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_pipeline_v1alpha1_PipelineTaskOutputResource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PipelineTaskOutputResource maps the name of a declared PipelineResource output dependency in a Task to the resource in the Pipeline's DeclaredPipelineResources that should be used.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name is the name of the PipelineResource as declared by the Task.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"resource": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource is the name of the DeclaredPipelienResource to use.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"name", "resource"},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_pipeline_v1alpha1_PipelineTaskParam(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PipelineTaskParam is used to provide arbitrary string parameters to a Task.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"value": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"name", "value"},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_pipeline_v1alpha1_PipelineTaskResources(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PipelineTaskResources allows a Pipeline to declare how its DeclaredPipelineResources should be provided to a Task as its inputs and outputs.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"inputs": {
						SchemaProps: spec.SchemaProps{
							Description: "Inputs holds the mapping from the PipelineResources declared in DeclaredPipelineResources to the input PipelineResources required by the Task.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.PipelineTaskInputResource"),
									},
								},
							},
						},
					},
					"outputs": {
						SchemaProps: spec.SchemaProps{
							Description: "Outputs holds the mapping from the PipelineResources declared in DeclaredPipelineResources to the input PipelineResources required by the Task.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.PipelineTaskOutputResource"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.PipelineTaskInputResource", "github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.PipelineTaskOutputResource"},
	}
}

func schema_pkg_apis_pipeline_v1alpha1_PipelineTaskRun(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PipelineTaskRun reports the results of running a step in the Task. Each task has the potential to succeed or fail (based on the exit code) and produces logs.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_pipeline_v1alpha1_PullRequestResource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PullRequestResource is an endpoint from which to get data which is required by a Build/Task for context.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"destinationDir": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"url": {
						SchemaProps: spec.SchemaProps{
							Description: "GitHub URL pointing to the pull request. Example: https://github.com/owner/repo/pulls/1",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"secrets": {
						SchemaProps: spec.SchemaProps{
							Description: "Secrets holds a struct to indicate a field name and corresponding secret name to populate it.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.SecretParam"),
									},
								},
							},
						},
					},
				},
				Required: []string{"name", "type", "destinationDir", "url", "secrets"},
			},
		},
		Dependencies: []string{
			"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.SecretParam"},
	}
}

func schema_pkg_apis_pipeline_v1alpha1_Results(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Results is used to identify an endpoint where results can be uploaded. The serviceaccount used for the pipeline must have access to this endpoint.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"url": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"type", "url"},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_pipeline_v1alpha1_SecretParam(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SecretParam indicates which secret can be used to populate a field of the resource",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"fieldName": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"secretKey": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"secretName": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"fieldName", "secretKey", "secretName"},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_pipeline_v1alpha1_StepState(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "StepState reports the results of running a step in the Task.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"ContainerState": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/api/core/v1.ContainerState"),
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"ContainerState"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.ContainerState"},
	}
}

func schema_pkg_apis_pipeline_v1alpha1_Task(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Task represents a collection of sequential steps that are run as part of a Pipeline using a set of inputs and producing a set of outputs. Tasks execute when TaskRuns are created that provide the input parameters and resources and output resources the Task requires.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Description: "Spec holds the desired state of the Task from the client",
							Ref:         ref("github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.TaskSpec"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.TaskSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_pipeline_v1alpha1_TaskList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TaskList contains a list of Task",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.Task"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.Task", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_pipeline_v1alpha1_TaskRef(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TaskRef can be used to refer to a specific instance of a task. Copied from CrossVersionObjectReference: https://github.com/kubernetes/kubernetes/blob/169df7434155cbbc22f1532cba8e0a9588e29ad8/pkg/apis/autoscaling/types.go#L64",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "TaskKind inficates the kind of the task, namespaced or cluster scoped.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "API version of the referent",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_pipeline_v1alpha1_TaskResource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TaskResource defines an input or output Resource declared as a requirement by a Task. The Name field will be used to refer to these Resources within the Task definition, and when provided as an Input, the Name will be the path to the volume mounted containing this Resource as an input (e.g. an input Resource named `workspace` will be mounted at `/workspace`).",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name declares the name by which a resource is referenced in the Task's definition. Resources may be referenced by name in the definition of a Task's steps.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Type is the type of this resource;",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"targetPath": {
						SchemaProps: spec.SchemaProps{
							Description: "TargetPath is the path in workspace directory where the task resource will be copied.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"outputImageDir": {
						SchemaProps: spec.SchemaProps{
							Description: "Path to the index.json file for output container images.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"name", "type"},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_pipeline_v1alpha1_TaskResourceBinding(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TaskResourceBinding points to the PipelineResource that will be used for the Task input or output called Name. The optional Path field corresponds to a path on disk at which the Resource can be found (used when providing the resource via mounted volume, overriding the default logic to fetch the Resource).",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"resourceRef": {
						SchemaProps: spec.SchemaProps{
							Description: "no more than one of the ResourceRef and ResourceSpec may be specified.",
							Ref:         ref("github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.PipelineResourceRef"),
						},
					},
					"resourceSpec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.PipelineResourceSpec"),
						},
					},
					"paths": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
				Required: []string{"name"},
			},
		},
		Dependencies: []string{
			"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.PipelineResourceRef", "github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.PipelineResourceSpec"},
	}
}

func schema_pkg_apis_pipeline_v1alpha1_TaskRun(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TaskRun represents a single execution of a Task. TaskRuns are how the steps specified in a Task are executed; they specify the parameters and resources used to run the steps in a Task.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.TaskRunSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.TaskRunStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.TaskRunSpec", "github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.TaskRunStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_pipeline_v1alpha1_TaskRunInputs(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TaskRunInputs holds the input values that this task was invoked with.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"resources": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.TaskResourceBinding"),
									},
								},
							},
						},
					},
					"params": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.Param"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.Param", "github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.TaskResourceBinding"},
	}
}

func schema_pkg_apis_pipeline_v1alpha1_TaskRunList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TaskRunList contains a list of TaskRun",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.TaskRun"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.TaskRun", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_pipeline_v1alpha1_TaskRunOutputs(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TaskRunOutputs holds the output values that this task was invoked with.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"resources": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.TaskResourceBinding"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.TaskResourceBinding"},
	}
}

func schema_pkg_apis_pipeline_v1alpha1_TaskRunSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TaskRunSpec defines the desired state of TaskRun",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"inputs": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.TaskRunInputs"),
						},
					},
					"outputs": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.TaskRunOutputs"),
						},
					},
					"results": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.Results"),
						},
					},
					"serviceAccount": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"taskRef": {
						SchemaProps: spec.SchemaProps{
							Description: "no more than one of the TaskRef and TaskSpec may be specified.",
							Ref:         ref("github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.TaskRef"),
						},
					},
					"taskSpec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.TaskSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Used for cancelling a taskrun (and maybe more later on)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"timeout": {
						SchemaProps: spec.SchemaProps{
							Description: "Time after which the build times out. Defaults to 10 minutes. Specified build timeout should be less than 24h. Refer Go's ParseDuration documentation for expected format: https://golang.org/pkg/time/#ParseDuration",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
						},
					},
					"nodeSelector": {
						SchemaProps: spec.SchemaProps{
							Description: "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"tolerations": {
						SchemaProps: spec.SchemaProps{
							Description: "If specified, the pod's tolerations.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.Toleration"),
									},
								},
							},
						},
					},
					"affinity": {
						SchemaProps: spec.SchemaProps{
							Description: "If specified, the pod's scheduling constraints",
							Ref:         ref("k8s.io/api/core/v1.Affinity"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.Results", "github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.TaskRef", "github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.TaskRunInputs", "github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.TaskRunOutputs", "github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.TaskSpec", "k8s.io/api/core/v1.Affinity", "k8s.io/api/core/v1.Toleration", "k8s.io/apimachinery/pkg/apis/meta/v1.Duration"},
	}
}

func schema_pkg_apis_pipeline_v1alpha1_TaskRunStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TaskRunStatus defines the observed state of TaskRun",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "ObservedGeneration is the 'Generation' of the Service that was last processed by the controller.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"conditions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "type",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Conditions the latest available observations of a resource's current state.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/knative/pkg/apis.Condition"),
									},
								},
							},
						},
					},
					"results": {
						SchemaProps: spec.SchemaProps{
							Description: "In #107 should be updated to hold the location logs have been uploaded to",
							Ref:         ref("github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.Results"),
						},
					},
					"podName": {
						SchemaProps: spec.SchemaProps{
							Description: "PodName is the name of the pod responsible for executing this task's steps.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"startTime": {
						SchemaProps: spec.SchemaProps{
							Description: "StartTime is the time the build is actually started.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"completionTime": {
						SchemaProps: spec.SchemaProps{
							Description: "CompletionTime is the time the build completed.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"steps": {
						SchemaProps: spec.SchemaProps{
							Description: "Steps describes the state of each build step container.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.StepState"),
									},
								},
							},
						},
					},
					"retriesStatus": {
						SchemaProps: spec.SchemaProps{
							Description: "RetriesStatus contains the history of TaskRunStatus in case of a retry in order to keep record of failures. All TaskRunStatus stored in RetriesStatus will have no date within the RetriesStatus as is redundant.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.TaskRunStatus"),
									},
								},
							},
						},
					},
					"resourcesResult": {
						SchemaProps: spec.SchemaProps{
							Description: "Results from Resources built during the taskRun. currently includes the digest of build container images optional",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.PipelineResourceResult"),
									},
								},
							},
						},
					},
				},
				Required: []string{"podName"},
			},
		},
		Dependencies: []string{
			"github.com/knative/pkg/apis.Condition", "github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.PipelineResourceResult", "github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.Results", "github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.StepState", "github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.TaskRunStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_pkg_apis_pipeline_v1alpha1_TaskSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TaskSpec defines the desired state of Task.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"inputs": {
						SchemaProps: spec.SchemaProps{
							Description: "Inputs is an optional set of parameters and resources which must be supplied by the user when a Task is executed by a TaskRun.",
							Ref:         ref("github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.Inputs"),
						},
					},
					"outputs": {
						SchemaProps: spec.SchemaProps{
							Description: "Outputs is an optional set of resources and results produced when this Task is run.",
							Ref:         ref("github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.Outputs"),
						},
					},
					"steps": {
						SchemaProps: spec.SchemaProps{
							Description: "Steps are the steps of the build; each step is run sequentially with the source mounted into /workspace.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.Container"),
									},
								},
							},
						},
					},
					"volumes": {
						SchemaProps: spec.SchemaProps{
							Description: "Volumes is a collection of volumes that are available to mount into the steps of the build.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.Volume"),
									},
								},
							},
						},
					},
					"stepTemplate": {
						SchemaProps: spec.SchemaProps{
							Description: "StepTemplate can be used as the basis for all step containers within the Task, so that the steps inherit settings on the base container.",
							Ref:         ref("k8s.io/api/core/v1.Container"),
						},
					},
					"containerTemplate": {
						SchemaProps: spec.SchemaProps{
							Description: "ContainerTemplate is the deprecated previous name of the StepTemplate field (#977).",
							Ref:         ref("k8s.io/api/core/v1.Container"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.Inputs", "github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1.Outputs", "k8s.io/api/core/v1.Container", "k8s.io/api/core/v1.Volume"},
	}
}

func schema_pkg_apis_pipeline_v1alpha1_TestResult(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TestResult allows a task to specify the location where test logs can be found and what format they will be in.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name declares the name by which a result is referenced in the Task's definition. Results may be referenced by name in the definition of a Task's steps.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"format": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"path": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"name", "format", "path"},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_pipeline_v1alpha1_hdcnKey(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "hdcnKey is used as the key for associating information with a context.Context.",
				Type:        []string{"object"},
				Properties:  map[string]spec.Schema{},
			},
		},
		Dependencies: []string{},
	}
}
