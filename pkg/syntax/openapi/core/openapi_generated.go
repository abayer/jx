// +build !ignore_autogenerated

// Code generated by openapi-gen. DO NOT EDIT.

// This file was autogenerated by openapi-gen. Do not edit it manually!

package core

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.AddonConfig":              schema_pkg_syntax_syntaxjenkinsio_v1alpha1_AddonConfig(ref),
		"github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.Agent":                    schema_pkg_syntax_syntaxjenkinsio_v1alpha1_Agent(ref),
		"github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.BasicAuth":                schema_pkg_syntax_syntaxjenkinsio_v1alpha1_BasicAuth(ref),
		"github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.BranchBuild":              schema_pkg_syntax_syntaxjenkinsio_v1alpha1_BranchBuild(ref),
		"github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.Build":                    schema_pkg_syntax_syntaxjenkinsio_v1alpha1_Build(ref),
		"github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.ChatConfig":               schema_pkg_syntax_syntaxjenkinsio_v1alpha1_ChatConfig(ref),
		"github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.EnvVar":                   schema_pkg_syntax_syntaxjenkinsio_v1alpha1_EnvVar(ref),
		"github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.IssueTrackerConfig":       schema_pkg_syntax_syntaxjenkinsio_v1alpha1_IssueTrackerConfig(ref),
		"github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.Loop":                     schema_pkg_syntax_syntaxjenkinsio_v1alpha1_Loop(ref),
		"github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.NamedLifecycle":           schema_pkg_syntax_syntaxjenkinsio_v1alpha1_NamedLifecycle(ref),
		"github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.ParsedPipeline":           schema_pkg_syntax_syntaxjenkinsio_v1alpha1_ParsedPipeline(ref),
		"github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.PipelineAgent":            schema_pkg_syntax_syntaxjenkinsio_v1alpha1_PipelineAgent(ref),
		"github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.PipelineConfig":           schema_pkg_syntax_syntaxjenkinsio_v1alpha1_PipelineConfig(ref),
		"github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.PipelineExtends":          schema_pkg_syntax_syntaxjenkinsio_v1alpha1_PipelineExtends(ref),
		"github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.PipelineLifecycle":        schema_pkg_syntax_syntaxjenkinsio_v1alpha1_PipelineLifecycle(ref),
		"github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.PipelineLifecycles":       schema_pkg_syntax_syntaxjenkinsio_v1alpha1_PipelineLifecycles(ref),
		"github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.PipelineStep":             schema_pkg_syntax_syntaxjenkinsio_v1alpha1_PipelineStep(ref),
		"github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.Pipelines":                schema_pkg_syntax_syntaxjenkinsio_v1alpha1_Pipelines(ref),
		"github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.Post":                     schema_pkg_syntax_syntaxjenkinsio_v1alpha1_Post(ref),
		"github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.PostAction":               schema_pkg_syntax_syntaxjenkinsio_v1alpha1_PostAction(ref),
		"github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.PreviewEnvironmentConfig": schema_pkg_syntax_syntaxjenkinsio_v1alpha1_PreviewEnvironmentConfig(ref),
		"github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.ProjectConfig":            schema_pkg_syntax_syntaxjenkinsio_v1alpha1_ProjectConfig(ref),
		"github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.RootOptions":              schema_pkg_syntax_syntaxjenkinsio_v1alpha1_RootOptions(ref),
		"github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.Stage":                    schema_pkg_syntax_syntaxjenkinsio_v1alpha1_Stage(ref),
		"github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.StageOptions":             schema_pkg_syntax_syntaxjenkinsio_v1alpha1_StageOptions(ref),
		"github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.Stash":                    schema_pkg_syntax_syntaxjenkinsio_v1alpha1_Stash(ref),
		"github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.Step":                     schema_pkg_syntax_syntaxjenkinsio_v1alpha1_Step(ref),
		"github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.Timeout":                  schema_pkg_syntax_syntaxjenkinsio_v1alpha1_Timeout(ref),
		"github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.Unstash":                  schema_pkg_syntax_syntaxjenkinsio_v1alpha1_Unstash(ref),
		"github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.WikiConfig":               schema_pkg_syntax_syntaxjenkinsio_v1alpha1_WikiConfig(ref),
	}
}

func schema_pkg_syntax_syntaxjenkinsio_v1alpha1_AddonConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"version": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_syntax_syntaxjenkinsio_v1alpha1_Agent(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Agent defines where the pipeline, stage, or step should run.",
				Properties: map[string]spec.Schema{
					"label": {
						SchemaProps: spec.SchemaProps{
							Description: "One of label or image is required.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"image": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_syntax_syntaxjenkinsio_v1alpha1_BasicAuth(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "BasicAuth keeps the credentials for basic authentication",
				Properties: map[string]spec.Schema{
					"username": {
						SchemaProps: spec.SchemaProps{
							Description: "Username stores the basic authentication user name",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"password": {
						SchemaProps: spec.SchemaProps{
							Description: "Password stores the basic authentication password",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"username", "password"},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_syntax_syntaxjenkinsio_v1alpha1_BranchBuild(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Properties: map[string]spec.Schema{
					"build": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.Build"),
						},
					},
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "which kind of pipeline - like release, pullRequest, feature",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "display name",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"envFrom": {
						SchemaProps: spec.SchemaProps{
							Description: "List of sources to populate environment variables in all the steps if there is not already an environment variable defined on that step",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.EnvFromSource"),
									},
								},
							},
						},
					},
					"env": {
						SchemaProps: spec.SchemaProps{
							Description: "List of environment variables to add to each step if there is not already a environment variable of that name",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.EnvVar"),
									},
								},
							},
						},
					},
					"excludePodTemplateEnv": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"excludePodTemplateVolumes": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.Build", "k8s.io/api/core/v1.EnvFromSource", "k8s.io/api/core/v1.EnvVar"},
	}
}

func schema_pkg_syntax_syntaxjenkinsio_v1alpha1_Build(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Properties: map[string]spec.Schema{
					"steps": {
						SchemaProps: spec.SchemaProps{
							Description: "Steps are the steps of the build; each step is run sequentially with the source mounted into /workspace.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.Container"),
									},
								},
							},
						},
					},
					"volumes": {
						SchemaProps: spec.SchemaProps{
							Description: "Volumes is a collection of volumes that are available to mount into the steps of the build.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.Volume"),
									},
								},
							},
						},
					},
					"serviceAccountName": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the service account as which to run this build.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"nodeSelector": {
						SchemaProps: spec.SchemaProps{
							Description: "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.Container", "k8s.io/api/core/v1.Volume"},
	}
}

func schema_pkg_syntax_syntaxjenkinsio_v1alpha1_ChatConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"url": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"developerChannel": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"userChannel": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_syntax_syntaxjenkinsio_v1alpha1_EnvVar(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "EnvVar is a key/value pair defining an environment variable",
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"value": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"name", "value"},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_syntax_syntaxjenkinsio_v1alpha1_IssueTrackerConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"url": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_syntax_syntaxjenkinsio_v1alpha1_Loop(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Loop is a special step that defines a variable, a list of possible values for that variable, and a set of steps to repeat for each value for the variable, with the variable set with that value in the environment for the execution of those steps.",
				Properties: map[string]spec.Schema{
					"variable": {
						SchemaProps: spec.SchemaProps{
							Description: "The variable name.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"values": {
						SchemaProps: spec.SchemaProps{
							Description: "The list of values to iterate over",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"steps": {
						SchemaProps: spec.SchemaProps{
							Description: "The steps to run",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.Step"),
									},
								},
							},
						},
					},
				},
				Required: []string{"variable", "values", "steps"},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.Step"},
	}
}

func schema_pkg_syntax_syntaxjenkinsio_v1alpha1_NamedLifecycle(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NamedLifecycle a lifecycle and its name",
				Properties: map[string]spec.Schema{
					"Name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"Lifecycle": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.PipelineLifecycle"),
						},
					},
				},
				Required: []string{"Name", "Lifecycle"},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.PipelineLifecycle"},
	}
}

func schema_pkg_syntax_syntaxjenkinsio_v1alpha1_ParsedPipeline(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ParsedPipeline is the internal representation of the Pipeline, used to validate and create CRDs",
				Properties: map[string]spec.Schema{
					"agent": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.Agent"),
						},
					},
					"environment": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.EnvVar"),
									},
								},
							},
						},
					},
					"options": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.RootOptions"),
						},
					},
					"stages": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.Stage"),
									},
								},
							},
						},
					},
					"post": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.Post"),
									},
								},
							},
						},
					},
				},
				Required: []string{"stages"},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.Agent", "github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.EnvVar", "github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.Post", "github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.RootOptions", "github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.Stage"},
	}
}

func schema_pkg_syntax_syntaxjenkinsio_v1alpha1_PipelineAgent(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PipelineAgent contains the agent definition metadata",
				Properties: map[string]spec.Schema{
					"label": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"container": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"dir": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_syntax_syntaxjenkinsio_v1alpha1_PipelineConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PipelineConfig defines the pipeline configuration",
				Properties: map[string]spec.Schema{
					"version": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"extends": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.PipelineExtends"),
						},
					},
					"agent": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.PipelineAgent"),
						},
					},
					"env": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.EnvVar"),
									},
								},
							},
						},
					},
					"environment": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"pipelines": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.Pipelines"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.PipelineAgent", "github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.PipelineExtends", "github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.Pipelines", "k8s.io/api/core/v1.EnvVar"},
	}
}

func schema_pkg_syntax_syntaxjenkinsio_v1alpha1_PipelineExtends(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PipelineExtends defines the extension (e.g. parent pipeline which is overloaded",
				Properties: map[string]spec.Schema{
					"import": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"file": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_syntax_syntaxjenkinsio_v1alpha1_PipelineLifecycle(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PipelineLifecycle defines the steps of a lifecycle section",
				Properties: map[string]spec.Schema{
					"steps": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.PipelineStep"),
									},
								},
							},
						},
					},
					"preSteps": {
						SchemaProps: spec.SchemaProps{
							Description: "PreSteps if using inheritance then invoke these steps before the base steps",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.PipelineStep"),
									},
								},
							},
						},
					},
					"replace": {
						SchemaProps: spec.SchemaProps{
							Description: "Replace if using inheritance then replace steps from the base pipeline",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.PipelineStep"},
	}
}

func schema_pkg_syntax_syntaxjenkinsio_v1alpha1_PipelineLifecycles(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PipelineLifecycles defines the steps of a lifecycle section",
				Properties: map[string]spec.Schema{
					"setup": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.PipelineLifecycle"),
						},
					},
					"setVersion": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.PipelineLifecycle"),
						},
					},
					"preBuild": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.PipelineLifecycle"),
						},
					},
					"build": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.PipelineLifecycle"),
						},
					},
					"postBuild": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.PipelineLifecycle"),
						},
					},
					"promote": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.PipelineLifecycle"),
						},
					},
					"pipeline": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.ParsedPipeline"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.ParsedPipeline", "github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.PipelineLifecycle"},
	}
}

func schema_pkg_syntax_syntaxjenkinsio_v1alpha1_PipelineStep(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PipelineStep defines an individual step in a pipeline, either a command (sh) or groovy block",
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"comment": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"container": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"dir": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"sh": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"groovy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"steps": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.PipelineStep"),
									},
								},
							},
						},
					},
					"when": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.PipelineStep"},
	}
}

func schema_pkg_syntax_syntaxjenkinsio_v1alpha1_Pipelines(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Pipelines contains all the different kinds of pipeline for different branches",
				Properties: map[string]spec.Schema{
					"pullRequest": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.PipelineLifecycles"),
						},
					},
					"release": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.PipelineLifecycles"),
						},
					},
					"feature": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.PipelineLifecycles"),
						},
					},
					"post": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.PipelineLifecycle"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.PipelineLifecycle", "github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.PipelineLifecycles"},
	}
}

func schema_pkg_syntax_syntaxjenkinsio_v1alpha1_Post(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Post contains a PostCondition and one more actions to be executed after a pipeline or stage if the condition is met.",
				Properties: map[string]spec.Schema{
					"condition": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"actions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.PostAction"),
									},
								},
							},
						},
					},
				},
				Required: []string{"condition", "actions"},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.PostAction"},
	}
}

func schema_pkg_syntax_syntaxjenkinsio_v1alpha1_PostAction(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PostAction contains the name of a built-in post action and options to pass to that action.",
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"options": {
						SchemaProps: spec.SchemaProps{
							Description: "Also, we'll need to do some magic to do type verification during translation - i.e., this action wants a number for this option, so translate the string value for that option to a number.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
				Required: []string{"name"},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_syntax_syntaxjenkinsio_v1alpha1_PreviewEnvironmentConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Properties: map[string]spec.Schema{
					"disabled": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"maximumInstances": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_syntax_syntaxjenkinsio_v1alpha1_ProjectConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Properties: map[string]spec.Schema{
					"version": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"env": {
						SchemaProps: spec.SchemaProps{
							Description: "List of global environment variables to add to each branch build and each step",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.EnvVar"),
									},
								},
							},
						},
					},
					"previewEnvironments": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.PreviewEnvironmentConfig"),
						},
					},
					"issueTracker": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.IssueTrackerConfig"),
						},
					},
					"chat": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.ChatConfig"),
						},
					},
					"wiki": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.WikiConfig"),
						},
					},
					"addons": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.AddonConfig"),
									},
								},
							},
						},
					},
					"buildPack": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"buildPackGitURL": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"buildPackGitRef": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"workflow": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"pipelineConfig": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.PipelineConfig"),
						},
					},
					"noReleasePrepare": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.AddonConfig", "github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.ChatConfig", "github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.IssueTrackerConfig", "github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.PipelineConfig", "github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.PreviewEnvironmentConfig", "github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.WikiConfig", "k8s.io/api/core/v1.EnvVar"},
	}
}

func schema_pkg_syntax_syntaxjenkinsio_v1alpha1_RootOptions(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "RootOptions contains options that can be configured on either a pipeline or a stage",
				Properties: map[string]spec.Schema{
					"timeout": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.Timeout"),
						},
					},
					"retry": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "byte",
						},
					},
					"containerOptions": {
						SchemaProps: spec.SchemaProps{
							Description: "ContainerOptions allows for advanced configuration of containers for a single stage or the whole pipeline, adding to configuration that can be configured through the syntax already. This includes things like CPU/RAM requests/limits, secrets, ports, etc. Some of these things will end up with native syntax approaches down the road.",
							Ref:         ref("k8s.io/api/core/v1.Container"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.Timeout", "k8s.io/api/core/v1.Container"},
	}
}

func schema_pkg_syntax_syntaxjenkinsio_v1alpha1_Stage(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Stage is a unit of work in a pipeline, corresponding either to a Task or a set of Tasks to be run sequentially or in parallel with common configuration.",
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"agent": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.Agent"),
						},
					},
					"options": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.StageOptions"),
						},
					},
					"environment": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.EnvVar"),
									},
								},
							},
						},
					},
					"steps": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.Step"),
									},
								},
							},
						},
					},
					"stages": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.Stage"),
									},
								},
							},
						},
					},
					"parallel": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.Stage"),
									},
								},
							},
						},
					},
					"post": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.Post"),
									},
								},
							},
						},
					},
				},
				Required: []string{"name"},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.Agent", "github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.EnvVar", "github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.Post", "github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.Stage", "github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.StageOptions", "github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.Step"},
	}
}

func schema_pkg_syntax_syntaxjenkinsio_v1alpha1_StageOptions(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "StageOptions contains both options that can be configured on either a pipeline or a stage, via RootOptions, or stage-specific options.",
				Properties: map[string]spec.Schema{
					"timeout": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.Timeout"),
						},
					},
					"retry": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "byte",
						},
					},
					"containerOptions": {
						SchemaProps: spec.SchemaProps{
							Description: "ContainerOptions allows for advanced configuration of containers for a single stage or the whole pipeline, adding to configuration that can be configured through the syntax already. This includes things like CPU/RAM requests/limits, secrets, ports, etc. Some of these things will end up with native syntax approaches down the road.",
							Ref:         ref("k8s.io/api/core/v1.Container"),
						},
					},
					"stash": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.Stash"),
						},
					},
					"unstash": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.Unstash"),
						},
					},
					"workspace": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.Stash", "github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.Timeout", "github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.Unstash", "k8s.io/api/core/v1.Container"},
	}
}

func schema_pkg_syntax_syntaxjenkinsio_v1alpha1_Stash(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Stash defines files to be saved for use in a later stage, marked with a name",
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"files": {
						SchemaProps: spec.SchemaProps{
							Description: "Eventually make this optional so that you can do volumes instead",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"name", "files"},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_syntax_syntaxjenkinsio_v1alpha1_Step(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Step defines a single step, from the author's perspective, to be executed within a stage.",
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional name to give the step for reporting purposes",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"command": {
						SchemaProps: spec.SchemaProps{
							Description: "One of command, step, or loop is required.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"args": {
						SchemaProps: spec.SchemaProps{
							Description: "args is optional, but only allowed with command",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"dir": {
						SchemaProps: spec.SchemaProps{
							Description: "dir is optional, but only allowed with command. Refers to subdirectory of workspace",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"step": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"options": {
						SchemaProps: spec.SchemaProps{
							Description: "options is optional, but only allowed with step Also, we'll need to do some magic to do type verification during translation - i.e., this step wants a number for this option, so translate the string value for that option to a number.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"loop": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.Loop"),
						},
					},
					"agent": {
						SchemaProps: spec.SchemaProps{
							Description: "agent can be overridden on a step",
							Ref:         ref("github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.Agent"),
						},
					},
					"image": {
						SchemaProps: spec.SchemaProps{
							Description: "Image alows the docker image for a step to be specified",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.Agent", "github.com/jenkins-x/jx/pkg/syntax/syntax.jenkins.io/v1alpha1.Loop"},
	}
}

func schema_pkg_syntax_syntaxjenkinsio_v1alpha1_Timeout(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Timeout defines how long a stage or pipeline can run before timing out.",
				Properties: map[string]spec.Schema{
					"time": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int64",
						},
					},
					"unit": {
						SchemaProps: spec.SchemaProps{
							Description: "Has some sane default - probably seconds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"time"},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_syntax_syntaxjenkinsio_v1alpha1_Unstash(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Unstash defines a previously-defined stash to be copied into this stage's workspace",
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"dir": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"name"},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_syntax_syntaxjenkinsio_v1alpha1_WikiConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"url": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"space": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}
